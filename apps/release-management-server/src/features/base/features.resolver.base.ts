/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Features } from "./Features";
import { FeaturesCountArgs } from "./FeaturesCountArgs";
import { FeaturesFindManyArgs } from "./FeaturesFindManyArgs";
import { FeaturesFindUniqueArgs } from "./FeaturesFindUniqueArgs";
import { CreateFeaturesArgs } from "./CreateFeaturesArgs";
import { UpdateFeaturesArgs } from "./UpdateFeaturesArgs";
import { DeleteFeaturesArgs } from "./DeleteFeaturesArgs";
import { FeaturesService } from "../features.service";
@graphql.Resolver(() => Features)
export class FeaturesResolverBase {
  constructor(protected readonly service: FeaturesService) {}

  async _featuresItemsMeta(
    @graphql.Args() args: FeaturesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Features])
  async featuresItems(
    @graphql.Args() args: FeaturesFindManyArgs
  ): Promise<Features[]> {
    return this.service.featuresItems(args);
  }

  @graphql.Query(() => Features, { nullable: true })
  async features(
    @graphql.Args() args: FeaturesFindUniqueArgs
  ): Promise<Features | null> {
    const result = await this.service.features(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Features)
  async createFeatures(
    @graphql.Args() args: CreateFeaturesArgs
  ): Promise<Features> {
    return await this.service.createFeatures({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Features)
  async updateFeatures(
    @graphql.Args() args: UpdateFeaturesArgs
  ): Promise<Features | null> {
    try {
      return await this.service.updateFeatures({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Features)
  async deleteFeatures(
    @graphql.Args() args: DeleteFeaturesArgs
  ): Promise<Features | null> {
    try {
      return await this.service.deleteFeatures(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Release } from "./Release";
import { ReleaseCountArgs } from "./ReleaseCountArgs";
import { ReleaseFindManyArgs } from "./ReleaseFindManyArgs";
import { ReleaseFindUniqueArgs } from "./ReleaseFindUniqueArgs";
import { CreateReleaseArgs } from "./CreateReleaseArgs";
import { UpdateReleaseArgs } from "./UpdateReleaseArgs";
import { DeleteReleaseArgs } from "./DeleteReleaseArgs";
import { ReleaseService } from "../release.service";
@graphql.Resolver(() => Release)
export class ReleaseResolverBase {
  constructor(protected readonly service: ReleaseService) {}

  async _releasesMeta(
    @graphql.Args() args: ReleaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Release])
  async releases(
    @graphql.Args() args: ReleaseFindManyArgs
  ): Promise<Release[]> {
    return this.service.releases(args);
  }

  @graphql.Query(() => Release, { nullable: true })
  async release(
    @graphql.Args() args: ReleaseFindUniqueArgs
  ): Promise<Release | null> {
    const result = await this.service.release(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Release)
  async createRelease(
    @graphql.Args() args: CreateReleaseArgs
  ): Promise<Release> {
    return await this.service.createRelease({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Release)
  async updateRelease(
    @graphql.Args() args: UpdateReleaseArgs
  ): Promise<Release | null> {
    try {
      return await this.service.updateRelease({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Release)
  async deleteRelease(
    @graphql.Args() args: DeleteReleaseArgs
  ): Promise<Release | null> {
    try {
      return await this.service.deleteRelease(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

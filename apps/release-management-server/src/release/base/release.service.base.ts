/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Release as PrismaRelease } from "@prisma/client";

export class ReleaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReleaseCountArgs, "select">): Promise<number> {
    return this.prisma.release.count(args);
  }

  async releases(args: Prisma.ReleaseFindManyArgs): Promise<PrismaRelease[]> {
    return this.prisma.release.findMany(args);
  }
  async release(
    args: Prisma.ReleaseFindUniqueArgs
  ): Promise<PrismaRelease | null> {
    return this.prisma.release.findUnique(args);
  }
  async createRelease(args: Prisma.ReleaseCreateArgs): Promise<PrismaRelease> {
    return this.prisma.release.create(args);
  }
  async updateRelease(args: Prisma.ReleaseUpdateArgs): Promise<PrismaRelease> {
    return this.prisma.release.update(args);
  }
  async deleteRelease(args: Prisma.ReleaseDeleteArgs): Promise<PrismaRelease> {
    return this.prisma.release.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReleaseService } from "../release.service";
import { ReleaseCreateInput } from "./ReleaseCreateInput";
import { Release } from "./Release";
import { ReleaseFindManyArgs } from "./ReleaseFindManyArgs";
import { ReleaseWhereUniqueInput } from "./ReleaseWhereUniqueInput";
import { ReleaseUpdateInput } from "./ReleaseUpdateInput";

export class ReleaseControllerBase {
  constructor(protected readonly service: ReleaseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Release })
  async createRelease(
    @common.Body() data: ReleaseCreateInput
  ): Promise<Release> {
    return await this.service.createRelease({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        channels: true,
        features: true,
        name: true,
        date: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Release] })
  @ApiNestedQuery(ReleaseFindManyArgs)
  async releases(@common.Req() request: Request): Promise<Release[]> {
    const args = plainToClass(ReleaseFindManyArgs, request.query);
    return this.service.releases({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        channels: true,
        features: true,
        name: true,
        date: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Release })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async release(
    @common.Param() params: ReleaseWhereUniqueInput
  ): Promise<Release | null> {
    const result = await this.service.release({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        channels: true,
        features: true,
        name: true,
        date: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Release })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRelease(
    @common.Param() params: ReleaseWhereUniqueInput,
    @common.Body() data: ReleaseUpdateInput
  ): Promise<Release | null> {
    try {
      return await this.service.updateRelease({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          channels: true,
          features: true,
          name: true,
          date: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Release })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRelease(
    @common.Param() params: ReleaseWhereUniqueInput
  ): Promise<Release | null> {
    try {
      return await this.service.deleteRelease({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          channels: true,
          features: true,
          name: true,
          date: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
